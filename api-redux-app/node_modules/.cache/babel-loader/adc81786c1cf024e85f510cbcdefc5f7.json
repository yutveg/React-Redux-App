{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\USER\\\\Documents\\\\Lambda\\\\ModuleProjects\\\\UNIT3\\\\React-Redux-App\\\\api-redux-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { FETCH_CIV_START, FETCH_CIV_SUCCESS, FETCH_CIV_FAILURE, INCREMENT_QUERYID, DECREMENT_QUERYID } from \"../actions\";\nconst initialState = {\n  civData: {\n    name: \"\",\n    army_type: \"\",\n    team_bonus: \"\",\n    civilization_bonus: []\n  },\n  queryID: 1,\n  isFetching: false,\n  error: \"\"\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CIV_START:\n      return _objectSpread({}, state, {\n        isFetching: true\n      });\n\n    case FETCH_CIV_SUCCESS:\n      return _objectSpread({}, state, {\n        civData: action.payload,\n        isFetching: false\n      });\n\n    case FETCH_CIV_FAILURE:\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: action.payload\n      });\n    //Check to see if at last civ before incrementing to avoid breaking API request\n\n    case INCREMENT_QUERYID:\n      if (state.queryID <= 17) return _objectSpread({}, state, {\n        queryID: state.queryID + 1\n      });else return state;\n    //Check to see if at first civ before decrementing to avoid breaking API request\n\n    case DECREMENT_QUERYID:\n      if (state.queryID > 1) return _objectSpread({}, state, {\n        queryID: state.queryID - 1\n      });else return state;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/USER/Documents/Lambda/ModuleProjects/UNIT3/React-Redux-App/api-redux-app/src/reducers/civReducer.js"],"names":["FETCH_CIV_START","FETCH_CIV_SUCCESS","FETCH_CIV_FAILURE","INCREMENT_QUERYID","DECREMENT_QUERYID","initialState","civData","name","army_type","team_bonus","civilization_bonus","queryID","isFetching","error","reducer","state","action","type","payload"],"mappings":";AAAA,SACEA,eADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,iBAJF,EAKEC,iBALF,QAMO,YANP;AAQA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,SAAS,EAAE,EAAvB;AAA2BC,IAAAA,UAAU,EAAE,EAAvC;AAA2CC,IAAAA,kBAAkB,EAAE;AAA/D,GADU;AAEnBC,EAAAA,OAAO,EAAE,CAFU;AAGnBC,EAAAA,UAAU,EAAE,KAHO;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAOA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGV,YAAT,EAAuBW,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKjB,eAAL;AACE,+BACKe,KADL;AAEEH,QAAAA,UAAU,EAAE;AAFd;;AAIF,SAAKX,iBAAL;AACE,+BACKc,KADL;AAEET,QAAAA,OAAO,EAAEU,MAAM,CAACE,OAFlB;AAGEN,QAAAA,UAAU,EAAE;AAHd;;AAKF,SAAKV,iBAAL;AACE,+BACKa,KADL;AAEEH,QAAAA,UAAU,EAAE,KAFd;AAGEC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAHhB;AAKF;;AACA,SAAKf,iBAAL;AACE,UAAIY,KAAK,CAACJ,OAAN,IAAiB,EAArB,EACE,yBACKI,KADL;AAEEJ,QAAAA,OAAO,EAAEI,KAAK,CAACJ,OAAN,GAAgB;AAF3B,SADF,KAKK,OAAOI,KAAP;AACP;;AACA,SAAKX,iBAAL;AACE,UAAIW,KAAK,CAACJ,OAAN,GAAgB,CAApB,EACE,yBACKI,KADL;AAEEJ,QAAAA,OAAO,EAAEI,KAAK,CAACJ,OAAN,GAAgB;AAF3B,SADF,KAKK,OAAOI,KAAP;;AACP;AACE,aAAOA,KAAP;AAnCJ;AAqCD,CAtCM","sourcesContent":["import {\r\n  FETCH_CIV_START,\r\n  FETCH_CIV_SUCCESS,\r\n  FETCH_CIV_FAILURE,\r\n  INCREMENT_QUERYID,\r\n  DECREMENT_QUERYID\r\n} from \"../actions\";\r\n\r\nconst initialState = {\r\n  civData: { name: \"\", army_type: \"\", team_bonus: \"\", civilization_bonus: [] },\r\n  queryID: 1,\r\n  isFetching: false,\r\n  error: \"\"\r\n};\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_CIV_START:\r\n      return {\r\n        ...state,\r\n        isFetching: true\r\n      };\r\n    case FETCH_CIV_SUCCESS:\r\n      return {\r\n        ...state,\r\n        civData: action.payload,\r\n        isFetching: false\r\n      };\r\n    case FETCH_CIV_FAILURE:\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        error: action.payload\r\n      };\r\n    //Check to see if at last civ before incrementing to avoid breaking API request\r\n    case INCREMENT_QUERYID:\r\n      if (state.queryID <= 17)\r\n        return {\r\n          ...state,\r\n          queryID: state.queryID + 1\r\n        };\r\n      else return state;\r\n    //Check to see if at first civ before decrementing to avoid breaking API request\r\n    case DECREMENT_QUERYID:\r\n      if (state.queryID > 1)\r\n        return {\r\n          ...state,\r\n          queryID: state.queryID - 1\r\n        };\r\n      else return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}